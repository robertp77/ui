{"remainingRequest":"C:\\Users\\arobu\\portfolio_rap55\\finalproject\\ui\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\arobu\\portfolio_rap55\\finalproject\\ui\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\arobu\\portfolio_rap55\\finalproject\\ui\\src\\data\\LinkDataStore.js","dependencies":[{"path":"C:\\Users\\arobu\\portfolio_rap55\\finalproject\\ui\\src\\data\\LinkDataStore.js","mtime":1619483017633},{"path":"C:\\Users\\arobu\\portfolio_rap55\\finalproject\\ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\arobu\\portfolio_rap55\\finalproject\\ui\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\arobu\\portfolio_rap55\\finalproject\\ui\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/arobu/portfolio_rap55/finalproject/ui/src/data/LinkDataStore.js"],"names":["querystring","DATA_URL","getJSON","url","apiAction","queryParameters","protocolOptions","parameters","stringify","urlWithParameters","console","log","fetch","response","json","getCoordinates","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","linkDataStore","data","useRemoteServer","initData","getnewlat","name","position","lat","coords","latitude","undefined","getnewlng","lng","longitude","setTitle","index","newTitle","title","addLink","newLink"],"mappings":"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","sourcesContent":["/*\r\n * This represents the reactive data to be edited.\r\n *\r\n * It contains no interaction logic (YAY!), just information about the links.\r\n *\r\n * It is initialized with example data to start but links could be set to empty and still work.\r\n *\r\n * @author Robert C. Duvall\r\n * @author Dennis Quan\r\n */\r\n\r\n// package that bundles up query parameters given as an Object into URL syntax\r\nimport querystring from 'querystring';\r\n\r\n\r\n// which URL to use to get the data from (remote or local)\r\n//const DATA_URL = 'https://cryptic-savannah-11810.herokuapp.com/';\r\nconst DATA_URL = '';\r\n\r\n\r\n// simple utility function to encode the given object as query parameters and return the resulting JSON\r\n// NOTE, queryParameters contains values meant to be passed along with the URL (i.e., after the ?)\r\n// NOTE, protocolOptions contains values meant to be passed along with the request (i.e., GET/POST, headers, etc.)\r\nasync function getJSON(url, apiAction, queryParameters, protocolOptions) {\r\n    const parameters = queryParameters ? `?${querystring.stringify(queryParameters)}` : '';\r\n    const urlWithParameters = `${url}${apiAction}${parameters}`;\r\n    console.log(urlWithParameters);\r\n    const response = await fetch(urlWithParameters, protocolOptions);\r\n    return response.json();\r\n}\r\n\r\nasync function getCoordinates() {\r\n    return new Promise(function(resolve, reject) {\r\n      navigator.geolocation.getCurrentPosition(resolve, reject);\r\n    });\r\n  }\r\n\r\nexport const linkDataStore = {\r\n    data: () => [],\r\n    //dataRef: DB.ref('data'),\r\n    useRemoteServer: true,\r\n    async initData () {\r\n        //this.data = await getJSON(DATA_URL, 'api/getLinks?lat='+lat+'&long='+long);\r\n        this.data = await getJSON(DATA_URL, 'api/getLinks');\r\n        console.log(`Getting initial version of data`);\r\n    },\r\n    async getnewlat(name){\r\n        const position = await getCoordinates(); \r\n        let lat = position.coords.latitude\r\n        if(name!=undefined){\r\n            await fetch('api/sendlat?lat='+lat+'&name='+name)\r\n        }\r\n        return lat\r\n    },\r\n    async getnewlng(name){\r\n        const position = await getCoordinates(); \r\n        let lng = position.coords.longitude;\r\n        if(name!=undefined){\r\n            await fetch('api/sendlong?long='+lng+'&name='+name)\r\n        }\r\n        return lng\r\n    },\r\n    // change title of group at the given index\r\n    // NOTE, if index can change, then should use a unique ID instead\r\n    async setTitle (index, newTitle) {\r\n        console.log(`Setting title from ${this.data[index].title} to ${newTitle}`);\r\n        // coming soon ...\r\n    },\r\n    // add new link to group at the given index\r\n    // NOTE, if index can change, then should use a unique ID instead\r\n    async addLink (index, newLink) {\r\n        console.log(`Adding new link ${newLink.name} to group ${this.data[index].title}`);\r\n        // coming soon ...\r\n    }\r\n};\r\n"]}]}